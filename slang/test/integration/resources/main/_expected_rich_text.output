///
/// Generated file. Do not edit.
///
// coverage:ignore-file
// ignore_for_file: type=lint, unused_import

part of 'strings.g.dart';

// Path: <root>
typedef TranslationsEn = Translations; // ignore: unused_element
class Translations implements BaseTranslations<AppLocale, Translations> {
	/// Returns the current translations of the given [context].
	///
	/// Usage:
	/// final t = Translations.of(context);
	static Translations of(BuildContext context) => InheritedLocaleData.of<AppLocale, Translations>(context).translations;

	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	Translations({Map<String, Node>? overrides, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver, TranslationMetadata<AppLocale, Translations>? meta})
		: assert(overrides == null, 'Set "translation_overrides: true" in order to enable this feature.'),
		  $meta = meta ?? TranslationMetadata(
		    locale: AppLocale.en,
		    overrides: overrides ?? {},
		    cardinalResolver: cardinalResolver,
		    ordinalResolver: ordinalResolver,
		  ) {
		$meta.setFlatMapFunction(_flatMapFunction);
	}

	/// Metadata for the translations of <en>.
	@override final TranslationMetadata<AppLocale, Translations> $meta;

	/// Access flat map
	dynamic operator[](String key) => $meta.getTranslation(key);

	late final Translations _root = this; // ignore: unused_field

	Translations $copyWith({TranslationMetadata<AppLocale, Translations>? meta}) => Translations(meta: meta ?? this.$meta);

	// Translations

	/// en: 'Simple'
	String get simple => 'Simple';

	/// en: 'Simple ${simpleParam}'
	String simpleParam({required Object simpleParam}) => 'Simple ${simpleParam}';

	/// en: 'Rich'
	TextSpan get rich => TextSpan(children: [
		const TextSpan(text: 'Rich'),
	]);

	/// en: 'Rich ${param}'
	TextSpan richParam({required InlineSpan param}) => TextSpan(children: [
		const TextSpan(text: 'Rich '),
		param,
	]);

	/// en: 'Rich ${param(Hello)}'
	TextSpan richDefaultParam({required InlineSpanBuilder param}) => TextSpan(children: [
		const TextSpan(text: 'Rich '),
		param('Hello'),
	]);

	/// en: 'Rich ${param(Simple)}'
	TextSpan richDefaultLinkedParam({required InlineSpanBuilder param}) => TextSpan(children: [
		const TextSpan(text: 'Rich '),
		param(_root.simple),
	]);

	/// en: 'Rich ${param(Simple ${simpleParam})}'
	TextSpan richDefaultLinkedParamTransitiveParam({required InlineSpanBuilder param, required Object simpleParam}) => TextSpan(children: [
		const TextSpan(text: 'Rich '),
		param(_root.simpleParam(simpleParam: simpleParam)),
	]);

	/// en: '(one) {one item} (other) {multiple items}'
	String simplePlural({required num n}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'))(n,
		one: 'one item',
		other: 'multiple items',
	);

	/// en: '(one) {one item} (other) {$n items}'
	String pluralWithParameter({required num n}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'))(n,
		one: 'one item',
		other: '${n} items',
	);

	/// en: '(one) {one item} (other) {multiple items}'
	TextSpan simpleRichPlural({required num n}) => RichPluralResolvers.bridge(
		n: n,
		resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'),
		one: () => TextSpan(children: [
			const TextSpan(text: 'one item'),
		]),
		other: () => TextSpan(children: [
			const TextSpan(text: 'multiple items'),
		]),
	);

	/// en: '(one) {one item} (other) {$n items}'
	TextSpan richPluralWithParameter({required num n, required InlineSpan Function(num) nBuilder}) => RichPluralResolvers.bridge(
		n: n,
		resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'),
		one: () => TextSpan(children: [
			const TextSpan(text: 'one item'),
		]),
		other: () => TextSpan(children: [
			nBuilder(n),
			const TextSpan(text: ' items'),
		]),
	);

	/// en: '(cat) {Miaw} (dog) {Woof}'
	String simpleContext({required Animal context}) {
		switch (context) {
			case Animal.cat:
				return 'Miaw';
			case Animal.dog:
				return 'Woof';
		}
	}

	/// en: '(cat) {Miaw} (dog) {Woof $context}'
	String contextWithParameter({required Animal context}) {
		switch (context) {
			case Animal.cat:
				return 'Miaw';
			case Animal.dog:
				return 'Woof ${context}';
		}
	}

	/// en: '(cat) {Miaw} (dog) {Woof}'
	TextSpan simpleRichContext({required Animal context}) {
		switch (context) {
			case Animal.cat:
				return TextSpan(children: [
					const TextSpan(text: 'Miaw'),
				]);
			case Animal.dog:
				return TextSpan(children: [
					const TextSpan(text: 'Woof'),
				]);
		}
	}

	/// en: '(cat) {Miaw} (dog) {Woof $context}'
	TextSpan richContextWithParameter({required Animal context, required InlineSpan Function(Animal) contextBuilder}) {
		switch (context) {
			case Animal.cat:
				return TextSpan(children: [
					const TextSpan(text: 'Miaw'),
				]);
			case Animal.dog:
				return TextSpan(children: [
					const TextSpan(text: 'Woof '),
					contextBuilder(context),
				]);
		}
	}
}

/// The flat map containing all translations for locale <en>.
/// Only for edge cases! For simple maps, use the map function of this library.
/// Note: We use a HashMap because Dart seems to be unable to compile large switch statements.
Map<String, dynamic>? _map;

extension on Translations {
	dynamic _flatMapFunction(String path) {
		final map = _map ?? _initFlatMap();
		return map[path];
	}

	/// Initializes the flat map and returns it.
	Map<String, dynamic> _initFlatMap() {
		final map = <String, dynamic>{};
		map['simple'] = 'Simple';
		map['simpleParam'] = ({required Object simpleParam}) => 'Simple ${simpleParam}';
		map['rich'] = TextSpan(children: [
				const TextSpan(text: 'Rich'),
			]);
		map['richParam'] = ({required InlineSpan param}) => TextSpan(children: [
				const TextSpan(text: 'Rich '),
				param,
			]);
		map['richDefaultParam'] = ({required InlineSpanBuilder param}) => TextSpan(children: [
				const TextSpan(text: 'Rich '),
				param('Hello'),
			]);
		map['richDefaultLinkedParam'] = ({required InlineSpanBuilder param}) => TextSpan(children: [
				const TextSpan(text: 'Rich '),
				param(_root.simple),
			]);
		map['richDefaultLinkedParamTransitiveParam'] = ({required InlineSpanBuilder param, required Object simpleParam}) => TextSpan(children: [
				const TextSpan(text: 'Rich '),
				param(_root.simpleParam(simpleParam: simpleParam)),
			]);
		map['simplePlural'] = ({required num n}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'))(n,
				one: 'one item',
				other: 'multiple items',
			);
		map['pluralWithParameter'] = ({required num n}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'))(n,
				one: 'one item',
				other: '${n} items',
			);
		map['simpleRichPlural'] = ({required num n}) => RichPluralResolvers.bridge(
				n: n,
				resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'),
				one: () => TextSpan(children: [
					const TextSpan(text: 'one item'),
				]),
				other: () => TextSpan(children: [
					const TextSpan(text: 'multiple items'),
				]),
			);
		map['richPluralWithParameter'] = ({required num n, required InlineSpan Function(num) nBuilder}) => RichPluralResolvers.bridge(
				n: n,
				resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'),
				one: () => TextSpan(children: [
					const TextSpan(text: 'one item'),
				]),
				other: () => TextSpan(children: [
					nBuilder(n),
					const TextSpan(text: ' items'),
				]),
			);
		map['simpleContext'] = ({required Animal context}) {
				switch (context) {
					case Animal.cat:
						return 'Miaw';
					case Animal.dog:
						return 'Woof';
				}
			};
		map['contextWithParameter'] = ({required Animal context}) {
				switch (context) {
					case Animal.cat:
						return 'Miaw';
					case Animal.dog:
						return 'Woof ${context}';
				}
			};
		map['simpleRichContext'] = ({required Animal context}) {
				switch (context) {
					case Animal.cat:
						return TextSpan(children: [
							const TextSpan(text: 'Miaw'),
						]);
					case Animal.dog:
						return TextSpan(children: [
							const TextSpan(text: 'Woof'),
						]);
				}
			};
		map['richContextWithParameter'] = ({required Animal context, required InlineSpan Function(Animal) contextBuilder}) {
				switch (context) {
					case Animal.cat:
						return TextSpan(children: [
							const TextSpan(text: 'Miaw'),
						]);
					case Animal.dog:
						return TextSpan(children: [
							const TextSpan(text: 'Woof '),
							contextBuilder(context),
						]);
				}
			};

		_map = map;
		return map;
	}
}

