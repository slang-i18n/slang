///
/// Generated file. Do not edit.
///
// coverage:ignore-file
// ignore_for_file: type=lint, unused_import

part of 'translations.cgm.dart';

// Path: <root>
typedef TranslationsEn = Translations; // ignore: unused_element
class Translations implements BaseTranslations<AppLocale, Translations> {
	/// Returns the current translations of the given [context].
	///
	/// Usage:
	/// final t = Translations.of(context);
	static Translations of(BuildContext context) => InheritedLocaleData.of<AppLocale, Translations>(context).translations;

	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	Translations({Map<String, Node>? overrides, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver, TranslationMetadata<AppLocale, Translations>? meta})
		: assert(overrides == null, 'Set "translation_overrides: true" in order to enable this feature.'),
		  $meta = meta ?? TranslationMetadata(
		    locale: AppLocale.en,
		    overrides: overrides ?? {},
		    cardinalResolver: cardinalResolver,
		    ordinalResolver: ordinalResolver,
		    s: $calc1(7, 0, 106),
		  ) {
		$meta.setFlatMapFunction(_flatMapFunction);
	}

	/// Metadata for the translations of <en>.
	@override final TranslationMetadata<AppLocale, Translations> $meta;

	/// Access flat map
	dynamic operator[](String key) => $meta.getTranslation(key);

	late final Translations _root = this; // ignore: unused_field

	Translations $copyWith({TranslationMetadata<AppLocale, Translations>? meta}) => Translations(meta: meta ?? this.$meta);

	// Translations
	late final TranslationsOnboardingEn onboarding = TranslationsOnboardingEn._(_root);
	late final TranslationsGroupEn group = TranslationsGroupEn._(_root);
	late final TranslationsEndEn end = TranslationsEndEn._(_root);

	/// en: '(one) {One} (other) {Other {count}, (male) {Hello Mr} (female) {Hello Ms}}'
	TextSpan advancedPlural({required num count, required InlineSpan Function(num) countBuilder, required GenderContext gender}) => RichPluralResolvers.bridge(
		n: count,
		resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'),
		one: () => TextSpan(children: [
			TextSpan(text: _root.$meta.d([20, 53, 62])),
		]),
		other: () => TextSpan(children: [
			TextSpan(text: _root.$meta.d([20, 47, 51, 62, 41, 123])),
			countBuilder(count),
			TextSpan(text: _root.$meta.d([119, 123]) + _root.onboarding.greet2(gender: gender)),
		]),
	);
}

// Path: onboarding
class TranslationsOnboardingEn {
	TranslationsOnboardingEn._(this._root);

	final Translations _root; // ignore: unused_field

	// Translations

	/// en: 'Welcome {fullName}'
	String welcome({required Object fullName}) => _root.$meta.d([12, 62, 55, 56, 52, 54, 62, 123]) + fullName.toString();

	/// en: 'Welcome {fullName}'
	String welcomeAlias({required Object fullName}) => _root.onboarding.welcome(fullName: fullName);

	/// en: '{firstName}'
	String welcomeOnlyParam({required Object firstName}) => firstName.toString();

	/// Bye text
	///
	/// en: 'Bye {firstName}'
	String bye({required Object firstName}) => _root.$meta.d([25, 34, 62, 123]) + firstName.toString();

	/// en: 'Continue'
	String get kContinue => _root.$meta.d([24, 52, 53, 47, 50, 53, 46, 62]);

	/// en: 'Continue'
	String get linkContinue => _root.onboarding.kContinue;

	/// en: 'Hi {name} and (male) {Hello Mr {lastName} and Welcome {fullName}} (female) {Hello Ms {lastName} and Bye {firstName}}'
	TextSpan hi({required InlineSpan name, required Object lastName, required GenderContext context, required Object fullName, required Object firstName}) => TextSpan(children: [
		TextSpan(text: _root.$meta.d([19, 50, 123])),
		name,
		TextSpan(text: _root.$meta.d([123, 58, 53, 63, 123]) + _root.onboarding.greet(lastName: lastName, context: context, fullName: fullName, firstName: firstName)),
	]);

	List<PageData> get pages => [
		TranslationsOnboarding$pages$0i0$En._(_root),
		TranslationsOnboarding$pages$0i1$En._(_root),
	];
	List<MPage> get modifierPages => [
		TranslationsOnboarding$modifierPages$0i0$En._(_root),
		TranslationsOnboarding$modifierPages$0i1$En._(_root),
	];

	/// en: '(male) {Hello Mr {lastName} and Welcome {fullName}} (female) {Hello Ms {lastName} and Bye {firstName}}'
	String greet({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
		switch (context) {
			case GenderContext.male:
				return _root.$meta.d([19, 62, 55, 55, 52, 123, 22, 41, 123]) + lastName.toString() + _root.$meta.d([123, 58, 53, 63, 123]) + _root.onboarding.welcome(fullName: fullName);
			case GenderContext.female:
				return _root.$meta.d([19, 62, 55, 55, 52, 123, 22, 40, 123]) + lastName.toString() + _root.$meta.d([123, 58, 53, 63, 123]) + _root.onboarding.bye(firstName: firstName);
		}
	}

	/// en: '(male) {Hello Mr} (female) {Hello Ms}'
	String greet2({required GenderContext gender}) {
		switch (gender) {
			case GenderContext.male:
				return _root.$meta.d([19, 62, 55, 55, 52, 123, 22, 41]);
			case GenderContext.female:
				return _root.$meta.d([19, 62, 55, 55, 52, 123, 22, 40]);
		}
	}

	/// en: '(male) {Hello Mr {lastName} and Welcome {fullName}} (female) {Hello Ms {lastName} and Bye {firstName}}, (male) {Hello Mr} (female) {Hello Ms}'
	String greetCombination({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => _root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context) + _root.$meta.d([119, 123]) + _root.onboarding.greet2(gender: gender);

	/// en: 'Hello (zero) {No Users and Welcome {fullName}} (one) {One User} (other) {{n} Users and Bye {firstName}}'
	String welcomeLinkedPlural({required num n, required Object fullName, required Object firstName}) => _root.$meta.d([19, 62, 55, 55, 52, 123]) + _root.group.users(n: n, fullName: fullName, firstName: firstName);

	/// en: 'Hello (male) {Hello Mr {lastName} and Welcome {fullName}} (female) {Hello Ms {lastName} and Bye {firstName}}'
	String welcomeLinkedContext({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => _root.$meta.d([19, 62, 55, 55, 52, 123]) + _root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context);

	/// en: 'Ultimate Hello (zero) {No Users and Welcome {fullName}} (one) {One User} (other) {{n} Users and Bye {firstName}} and Hello (male) {Hello Mr {lastName} and Welcome {fullName}} (female) {Hello Ms {lastName} and Bye {firstName}}'
	String welcomeFullLink({required num n, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => _root.$meta.d([14, 55, 47, 50, 54, 58, 47, 62, 123]) + _root.onboarding.welcomeLinkedPlural(n: n, fullName: fullName, firstName: firstName) + _root.$meta.d([123, 58, 53, 63, 123]) + _root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context);
}

// Path: group
class TranslationsGroupEn {
	TranslationsGroupEn._(this._root);

	final Translations _root; // ignore: unused_field

	// Translations

	/// en: '(zero) {No Users and Welcome {fullName}} (one) {One User} (other) {{n} Users and Bye {firstName}}'
	String users({required num n, required Object fullName, required Object firstName}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'))(n,
		zero: _root.$meta.d([21, 52, 123, 14, 40, 62, 41, 40, 123, 58, 53, 63, 123]) + _root.onboarding.welcome(fullName: fullName),
		one: _root.$meta.d([20, 53, 62, 123, 14, 40, 62, 41]),
		other: n.toString() + _root.$meta.d([123, 14, 40, 62, 41, 40, 123, 58, 53, 63, 123]) + _root.onboarding.bye(firstName: firstName),
	);
}

// Path: end
class TranslationsEndEn with EndData {
	TranslationsEndEn._(this._root);

	final Translations _root; // ignore: unused_field

	// Translations
	@override List<String> get stringPages => [
		_root.$meta.d([106, 40, 47, 123, 11, 58, 60, 62]),
		_root.$meta.d([105, 53, 63, 123, 11, 58, 60, 62]),
	];
	@override List<Map<String, String>> get pages => [
		{
			'unknown': _root.$meta.d([14, 53, 48, 53, 52, 44, 53, 81, 30, 41, 41, 52, 41]),
		},
		{
			'with space': _root.$meta.d([26, 53, 123, 30, 41, 41, 52, 41]),
			'with second space': _root.$meta.d([26, 53, 123, 105, 53, 63, 123, 30, 41, 41, 52, 41]),
		},
	];
}

// Path: onboarding.pages.0
class TranslationsOnboarding$pages$0i0$En with PageData {
	TranslationsOnboarding$pages$0i0$En._(this._root);

	final Translations _root; // ignore: unused_field

	// Translations

	/// en: 'First Page'
	@override String get title => _root.$meta.d([29, 50, 41, 40, 47, 123, 11, 58, 60, 62]);

	/// en: 'First Page Content'
	@override String get content => _root.$meta.d([29, 50, 41, 40, 47, 123, 11, 58, 60, 62, 123, 24, 52, 53, 47, 62, 53, 47]);
}

// Path: onboarding.pages.1
class TranslationsOnboarding$pages$0i1$En with PageData {
	TranslationsOnboarding$pages$0i1$En._(this._root);

	final Translations _root; // ignore: unused_field

	// Translations

	/// en: 'Second Page'
	@override String get title => _root.$meta.d([8, 62, 56, 52, 53, 63, 123, 11, 58, 60, 62]);
}

// Path: onboarding.modifierPages.0
class TranslationsOnboarding$modifierPages$0i0$En with MPage {
	TranslationsOnboarding$modifierPages$0i0$En._(this._root);

	final Translations _root; // ignore: unused_field

	// Translations

	/// en: 'First Modifier Page'
	@override String get title => _root.$meta.d([29, 50, 41, 40, 47, 123, 22, 52, 63, 50, 61, 50, 62, 41, 123, 11, 58, 60, 62]);

	/// en: 'First Page Content'
	@override String get content => _root.$meta.d([29, 50, 41, 40, 47, 123, 11, 58, 60, 62, 123, 24, 52, 53, 47, 62, 53, 47]);
}

// Path: onboarding.modifierPages.1
class TranslationsOnboarding$modifierPages$0i1$En with MPage {
	TranslationsOnboarding$modifierPages$0i1$En._(this._root);

	final Translations _root; // ignore: unused_field

	// Translations

	/// en: 'Second Modifier Page'
	@override String get title => _root.$meta.d([8, 62, 56, 52, 53, 63, 123, 22, 52, 63, 50, 61, 50, 62, 41, 123, 11, 58, 60, 62]);
}

/// The flat map containing all translations for locale <en>.
/// Only for edge cases! For simple maps, use the map function of this library.
/// Note: We use a HashMap because Dart seems to be unable to compile large switch statements.
Map<String, dynamic>? _map;

extension on Translations {
	dynamic _flatMapFunction(String path) {
		final map = _map ?? _initFlatMap();
		return map[path];
	}

	/// Initializes the flat map and returns it.
	Map<String, dynamic> _initFlatMap() {
		final map = <String, dynamic>{};
		map['onboarding.welcome'] = ({required Object fullName}) => _root.$meta.d([12, 62, 55, 56, 52, 54, 62, 123]) + fullName.toString();
		map['onboarding.welcomeAlias'] = ({required Object fullName}) => _root.onboarding.welcome(fullName: fullName);
		map['onboarding.welcomeOnlyParam'] = ({required Object firstName}) => firstName.toString();
		map['onboarding.bye'] = ({required Object firstName}) => _root.$meta.d([25, 34, 62, 123]) + firstName.toString();
		map['onboarding.kContinue'] = _root.$meta.d([24, 52, 53, 47, 50, 53, 46, 62]);
		map['onboarding.linkContinue'] = _root.onboarding.kContinue;
		map['onboarding.hi'] = ({required InlineSpan name, required Object lastName, required GenderContext context, required Object fullName, required Object firstName}) => TextSpan(children: [
				TextSpan(text: _root.$meta.d([19, 50, 123])),
				name,
				TextSpan(text: _root.$meta.d([123, 58, 53, 63, 123]) + _root.onboarding.greet(lastName: lastName, context: context, fullName: fullName, firstName: firstName)),
			]);
		map['onboarding.pages.0.title'] = _root.$meta.d([29, 50, 41, 40, 47, 123, 11, 58, 60, 62]);
		map['onboarding.pages.0.content'] = _root.$meta.d([29, 50, 41, 40, 47, 123, 11, 58, 60, 62, 123, 24, 52, 53, 47, 62, 53, 47]);
		map['onboarding.pages.1.title'] = _root.$meta.d([8, 62, 56, 52, 53, 63, 123, 11, 58, 60, 62]);
		map['onboarding.modifierPages.0.title'] = _root.$meta.d([29, 50, 41, 40, 47, 123, 22, 52, 63, 50, 61, 50, 62, 41, 123, 11, 58, 60, 62]);
		map['onboarding.modifierPages.0.content'] = _root.$meta.d([29, 50, 41, 40, 47, 123, 11, 58, 60, 62, 123, 24, 52, 53, 47, 62, 53, 47]);
		map['onboarding.modifierPages.1.title'] = _root.$meta.d([8, 62, 56, 52, 53, 63, 123, 22, 52, 63, 50, 61, 50, 62, 41, 123, 11, 58, 60, 62]);
		map['onboarding.greet'] = ({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
				switch (context) {
					case GenderContext.male:
						return _root.$meta.d([19, 62, 55, 55, 52, 123, 22, 41, 123]) + lastName.toString() + _root.$meta.d([123, 58, 53, 63, 123]) + _root.onboarding.welcome(fullName: fullName);
					case GenderContext.female:
						return _root.$meta.d([19, 62, 55, 55, 52, 123, 22, 40, 123]) + lastName.toString() + _root.$meta.d([123, 58, 53, 63, 123]) + _root.onboarding.bye(firstName: firstName);
				}
			};
		map['onboarding.greet2'] = ({required GenderContext gender}) {
				switch (gender) {
					case GenderContext.male:
						return _root.$meta.d([19, 62, 55, 55, 52, 123, 22, 41]);
					case GenderContext.female:
						return _root.$meta.d([19, 62, 55, 55, 52, 123, 22, 40]);
				}
			};
		map['onboarding.greetCombination'] = ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => _root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context) + _root.$meta.d([119, 123]) + _root.onboarding.greet2(gender: gender);
		map['onboarding.welcomeLinkedPlural'] = ({required num n, required Object fullName, required Object firstName}) => _root.$meta.d([19, 62, 55, 55, 52, 123]) + _root.group.users(n: n, fullName: fullName, firstName: firstName);
		map['onboarding.welcomeLinkedContext'] = ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => _root.$meta.d([19, 62, 55, 55, 52, 123]) + _root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context);
		map['onboarding.welcomeFullLink'] = ({required num n, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => _root.$meta.d([14, 55, 47, 50, 54, 58, 47, 62, 123]) + _root.onboarding.welcomeLinkedPlural(n: n, fullName: fullName, firstName: firstName) + _root.$meta.d([123, 58, 53, 63, 123]) + _root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context);
		map['group.users'] = ({required num n, required Object fullName, required Object firstName}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'))(n,
				zero: _root.$meta.d([21, 52, 123, 14, 40, 62, 41, 40, 123, 58, 53, 63, 123]) + _root.onboarding.welcome(fullName: fullName),
				one: _root.$meta.d([20, 53, 62, 123, 14, 40, 62, 41]),
				other: n.toString() + _root.$meta.d([123, 14, 40, 62, 41, 40, 123, 58, 53, 63, 123]) + _root.onboarding.bye(firstName: firstName),
			);
		map['end.stringPages.0'] = _root.$meta.d([106, 40, 47, 123, 11, 58, 60, 62]);
		map['end.stringPages.1'] = _root.$meta.d([105, 53, 63, 123, 11, 58, 60, 62]);
		map['end.pages.0.unknown'] = _root.$meta.d([14, 53, 48, 53, 52, 44, 53, 81, 30, 41, 41, 52, 41]);
		map['end.pages.1.with space'] = _root.$meta.d([26, 53, 123, 30, 41, 41, 52, 41]);
		map['end.pages.1.with second space'] = _root.$meta.d([26, 53, 123, 105, 53, 63, 123, 30, 41, 41, 52, 41]);
		map['advancedPlural'] = ({required num count, required InlineSpan Function(num) countBuilder, required GenderContext gender}) => RichPluralResolvers.bridge(
				n: count,
				resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'),
				one: () => TextSpan(children: [
					TextSpan(text: _root.$meta.d([20, 53, 62])),
				]),
				other: () => TextSpan(children: [
					TextSpan(text: _root.$meta.d([20, 47, 51, 62, 41, 123])),
					countBuilder(count),
					TextSpan(text: _root.$meta.d([119, 123]) + _root.onboarding.greet2(gender: gender)),
				]),
			);

		_map = map;
		return map;
	}
}

