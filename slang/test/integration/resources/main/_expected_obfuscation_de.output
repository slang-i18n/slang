///
/// Generated file. Do not edit.
///
// coverage:ignore-file
// ignore_for_file: type=lint, unused_import

import 'package:flutter/widgets.dart';
import 'package:intl/intl.dart';
import 'package:slang/generated.dart';
import 'package:slang/secret.dart';
import 'translations.cgm.dart';

// Path: <root>
class TranslationsDe implements Translations {
	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	TranslationsDe({Map<String, Node>? overrides, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver, TranslationMetadata<AppLocale, Translations>? meta})
		: assert(overrides == null, 'Set "translation_overrides: true" in order to enable this feature.'),
		  $meta = meta ?? TranslationMetadata(
		    locale: AppLocale.de,
		    overrides: overrides ?? {},
		    cardinalResolver: cardinalResolver,
		    ordinalResolver: ordinalResolver,
		    s: $calc1(7, 0, 106),
		  ) {
		$meta.setFlatMapFunction(_flatMapFunction);
	}

	/// Metadata for the translations of <de>.
	@override final TranslationMetadata<AppLocale, Translations> $meta;

	/// Access flat map
	@override dynamic operator[](String key) => $meta.getTranslation(key);

	late final TranslationsDe _root = this; // ignore: unused_field

	@override 
	TranslationsDe $copyWith({TranslationMetadata<AppLocale, Translations>? meta}) => TranslationsDe(meta: meta ?? this.$meta);

	// Translations
	@override late final _TranslationsOnboardingDe onboarding = _TranslationsOnboardingDe._(_root);
	@override late final _TranslationsGroupDe group = _TranslationsGroupDe._(_root);
	@override late final _TranslationsEndDe end = _TranslationsEndDe._(_root);
	@override TextSpan advancedPlural({required num count, required InlineSpan Function(num) countBuilder, required GenderContext gender}) => RichPluralResolvers.bridge(
		n: count,
		resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('de'),
		one: () => TextSpan(children: [
			TextSpan(text: _root.$meta.d([30, 50, 53, 40])),
		]),
		other: () => TextSpan(children: [
			TextSpan(text: _root.$meta.d([26, 53, 63, 62, 41, 62, 123])),
			countBuilder(count),
			TextSpan(text: _root.$meta.d([119, 123]) + _root.onboarding.greet2(gender: gender)),
		]),
	);
}

// Path: onboarding
class _TranslationsOnboardingDe implements TranslationsOnboardingEn {
	_TranslationsOnboardingDe._(this._root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String welcome({required Object fullName}) => _root.$meta.d([12, 50, 55, 55, 48, 52, 54, 54, 62, 53, 123]) + fullName.toString();
	@override String welcomeAlias({required Object fullName}) => _root.onboarding.welcome(fullName: fullName);
	@override String welcomeOnlyParam({required Object firstName}) => firstName.toString();

	/// Bye text
	@override String bye({required Object firstName}) => _root.$meta.d([15, 40, 56, 51, 167, 40, 40, 123]) + firstName.toString();

	@override String get kContinue => _root.$meta.d([12, 62, 50, 47, 62, 41]);
	@override String get linkContinue => _root.onboarding.kContinue;
	@override TextSpan hi({required InlineSpan name, required Object lastName, required GenderContext context, required Object fullName, required Object firstName}) => TextSpan(children: [
		TextSpan(text: _root.$meta.d([19, 50, 123])),
		name,
		TextSpan(text: _root.$meta.d([123, 46, 53, 63, 123]) + _root.onboarding.greet(lastName: lastName, context: context, fullName: fullName, firstName: firstName)),
	]);
	@override List<PageData> get pages => [
		_TranslationsOnboarding$pages$0i0$De._(_root),
		_TranslationsOnboarding$pages$0i1$De._(_root),
	];
	@override List<MPage> get modifierPages => [
		_TranslationsOnboarding$modifierPages$0i0$De._(_root),
		_TranslationsOnboarding$modifierPages$0i1$De._(_root),
	];
	@override String greet({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
		switch (context) {
			case GenderContext.male:
				return _root.$meta.d([19, 58, 55, 55, 52, 123, 19, 62, 41, 41, 123]) + lastName.toString() + _root.$meta.d([123, 46, 53, 63, 123]) + _root.onboarding.welcome(fullName: fullName);
			case GenderContext.female:
				return _root.$meta.d([19, 58, 55, 55, 52, 123, 29, 41, 58, 46, 123]) + lastName.toString() + _root.$meta.d([123, 46, 53, 63, 123]) + _root.onboarding.bye(firstName: firstName);
		}
	}
	@override String greet2({required GenderContext gender}) {
		switch (gender) {
			case GenderContext.male:
				return _root.$meta.d([19, 58, 55, 55, 52, 123, 19, 62, 41, 41]);
			case GenderContext.female:
				return _root.$meta.d([19, 58, 55, 55, 52, 123, 29, 41, 58, 46]);
		}
	}
	@override String greetCombination({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => _root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context) + _root.$meta.d([119, 123]) + _root.onboarding.greet2(gender: gender);
	@override String welcomeLinkedPlural({required num n, required Object fullName, required Object firstName}) => _root.$meta.d([19, 58, 55, 55, 52, 123]) + _root.group.users(n: n, fullName: fullName, firstName: firstName);
	@override String welcomeLinkedContext({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => _root.$meta.d([19, 58, 55, 55, 52, 123]) + _root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context);
	@override String welcomeFullLink({required num n, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => _root.$meta.d([14, 55, 47, 50, 54, 58, 47, 50, 45, 62, 123]) + _root.onboarding.welcomeLinkedPlural(n: n, fullName: fullName, firstName: firstName) + _root.$meta.d([123, 58, 53, 63, 123]) + _root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context);
}

// Path: group
class _TranslationsGroupDe implements TranslationsGroupEn {
	_TranslationsGroupDe._(this._root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String users({required num n, required Object fullName, required Object firstName}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('de'))(n,
		zero: _root.$meta.d([16, 62, 50, 53, 62, 123, 21, 46, 47, 33, 62, 41, 123, 46, 53, 63, 123]) + _root.onboarding.welcome(fullName: fullName),
		one: _root.$meta.d([30, 50, 53, 123, 21, 46, 47, 33, 62, 41]),
		other: n.toString() + _root.$meta.d([123, 21, 46, 47, 33, 62, 41, 123, 46, 53, 63, 123]) + _root.onboarding.bye(firstName: firstName),
	);
}

// Path: end
class _TranslationsEndDe with EndData implements TranslationsEndEn {
	_TranslationsEndDe._(this._root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override List<String> get stringPages => [
		_root.$meta.d([106, 117, 123, 8, 62, 50, 47, 62]),
		_root.$meta.d([105, 117, 123, 8, 62, 50, 47, 62]),
	];
	@override List<Map<String, String>> get pages => [
		{
			'unknown': _root.$meta.d([14, 53, 57, 62, 48, 58, 53, 53, 47, 62, 41, 81, 29, 62, 51, 55, 62, 41]),
		},
		{
			'with space': _root.$meta.d([30, 50, 53, 123, 29, 62, 51, 55, 62, 41]),
			'with second space': _root.$meta.d([30, 50, 53, 123, 105, 117, 123, 29, 62, 51, 55, 62, 41]),
		},
	];
}

// Path: onboarding.pages.0
class _TranslationsOnboarding$pages$0i0$De with PageData implements TranslationsOnboarding$pages$0i0$En {
	_TranslationsOnboarding$pages$0i0$De._(this._root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String get title => _root.$meta.d([30, 41, 40, 47, 62, 123, 8, 62, 50, 47, 62]);
	@override String get content => _root.$meta.d([30, 41, 40, 47, 62, 41, 123, 8, 62, 50, 47, 62, 53, 50, 53, 51, 58, 55, 47]);
}

// Path: onboarding.pages.1
class _TranslationsOnboarding$pages$0i1$De with PageData implements TranslationsOnboarding$pages$0i1$En {
	_TranslationsOnboarding$pages$0i1$De._(this._root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String get title => _root.$meta.d([1, 44, 62, 50, 47, 62, 123, 8, 62, 50, 47, 62]);
}

// Path: onboarding.modifierPages.0
class _TranslationsOnboarding$modifierPages$0i0$De with MPage implements TranslationsOnboarding$modifierPages$0i0$En {
	_TranslationsOnboarding$modifierPages$0i0$De._(this._root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String get title => _root.$meta.d([30, 41, 40, 47, 62, 123, 22, 52, 63, 50, 61, 50, 62, 41, 123, 8, 62, 50, 47, 62]);
	@override String get content => _root.$meta.d([30, 41, 40, 47, 62, 41, 123, 8, 62, 50, 47, 62, 53, 50, 53, 51, 58, 55, 47]);
}

// Path: onboarding.modifierPages.1
class _TranslationsOnboarding$modifierPages$0i1$De with MPage implements TranslationsOnboarding$modifierPages$0i1$En {
	_TranslationsOnboarding$modifierPages$0i1$De._(this._root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String get title => _root.$meta.d([1, 44, 62, 50, 47, 62, 123, 22, 52, 63, 50, 61, 50, 62, 41, 123, 8, 62, 50, 47, 62]);
}

/// The flat map containing all translations for locale <de>.
/// Only for edge cases! For simple maps, use the map function of this library.
/// Note: We use a HashMap because Dart seems to be unable to compile large switch statements.
Map<String, dynamic>? _map;

extension on TranslationsDe {
	dynamic _flatMapFunction(String path) {
		final map = _map ?? _initFlatMap();
		return map[path];
	}

	/// Initializes the flat map and returns it.
	Map<String, dynamic> _initFlatMap() {
		final map = <String, dynamic>{};
		map['onboarding.welcome'] = ({required Object fullName}) => _root.$meta.d([12, 50, 55, 55, 48, 52, 54, 54, 62, 53, 123]) + fullName.toString();
		map['onboarding.welcomeAlias'] = ({required Object fullName}) => _root.onboarding.welcome(fullName: fullName);
		map['onboarding.welcomeOnlyParam'] = ({required Object firstName}) => firstName.toString();
		map['onboarding.bye'] = ({required Object firstName}) => _root.$meta.d([15, 40, 56, 51, 167, 40, 40, 123]) + firstName.toString();
		map['onboarding.kContinue'] = _root.$meta.d([12, 62, 50, 47, 62, 41]);
		map['onboarding.linkContinue'] = _root.onboarding.kContinue;
		map['onboarding.hi'] = ({required InlineSpan name, required Object lastName, required GenderContext context, required Object fullName, required Object firstName}) => TextSpan(children: [
				TextSpan(text: _root.$meta.d([19, 50, 123])),
				name,
				TextSpan(text: _root.$meta.d([123, 46, 53, 63, 123]) + _root.onboarding.greet(lastName: lastName, context: context, fullName: fullName, firstName: firstName)),
			]);
		map['onboarding.pages.0.title'] = _root.$meta.d([30, 41, 40, 47, 62, 123, 8, 62, 50, 47, 62]);
		map['onboarding.pages.0.content'] = _root.$meta.d([30, 41, 40, 47, 62, 41, 123, 8, 62, 50, 47, 62, 53, 50, 53, 51, 58, 55, 47]);
		map['onboarding.pages.1.title'] = _root.$meta.d([1, 44, 62, 50, 47, 62, 123, 8, 62, 50, 47, 62]);
		map['onboarding.modifierPages.0.title'] = _root.$meta.d([30, 41, 40, 47, 62, 123, 22, 52, 63, 50, 61, 50, 62, 41, 123, 8, 62, 50, 47, 62]);
		map['onboarding.modifierPages.0.content'] = _root.$meta.d([30, 41, 40, 47, 62, 41, 123, 8, 62, 50, 47, 62, 53, 50, 53, 51, 58, 55, 47]);
		map['onboarding.modifierPages.1.title'] = _root.$meta.d([1, 44, 62, 50, 47, 62, 123, 22, 52, 63, 50, 61, 50, 62, 41, 123, 8, 62, 50, 47, 62]);
		map['onboarding.greet'] = ({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
				switch (context) {
					case GenderContext.male:
						return _root.$meta.d([19, 58, 55, 55, 52, 123, 19, 62, 41, 41, 123]) + lastName.toString() + _root.$meta.d([123, 46, 53, 63, 123]) + _root.onboarding.welcome(fullName: fullName);
					case GenderContext.female:
						return _root.$meta.d([19, 58, 55, 55, 52, 123, 29, 41, 58, 46, 123]) + lastName.toString() + _root.$meta.d([123, 46, 53, 63, 123]) + _root.onboarding.bye(firstName: firstName);
				}
			};
		map['onboarding.greet2'] = ({required GenderContext gender}) {
				switch (gender) {
					case GenderContext.male:
						return _root.$meta.d([19, 58, 55, 55, 52, 123, 19, 62, 41, 41]);
					case GenderContext.female:
						return _root.$meta.d([19, 58, 55, 55, 52, 123, 29, 41, 58, 46]);
				}
			};
		map['onboarding.greetCombination'] = ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => _root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context) + _root.$meta.d([119, 123]) + _root.onboarding.greet2(gender: gender);
		map['onboarding.welcomeLinkedPlural'] = ({required num n, required Object fullName, required Object firstName}) => _root.$meta.d([19, 58, 55, 55, 52, 123]) + _root.group.users(n: n, fullName: fullName, firstName: firstName);
		map['onboarding.welcomeLinkedContext'] = ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => _root.$meta.d([19, 58, 55, 55, 52, 123]) + _root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context);
		map['onboarding.welcomeFullLink'] = ({required num n, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => _root.$meta.d([14, 55, 47, 50, 54, 58, 47, 50, 45, 62, 123]) + _root.onboarding.welcomeLinkedPlural(n: n, fullName: fullName, firstName: firstName) + _root.$meta.d([123, 58, 53, 63, 123]) + _root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context);
		map['group.users'] = ({required num n, required Object fullName, required Object firstName}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('de'))(n,
				zero: _root.$meta.d([16, 62, 50, 53, 62, 123, 21, 46, 47, 33, 62, 41, 123, 46, 53, 63, 123]) + _root.onboarding.welcome(fullName: fullName),
				one: _root.$meta.d([30, 50, 53, 123, 21, 46, 47, 33, 62, 41]),
				other: n.toString() + _root.$meta.d([123, 21, 46, 47, 33, 62, 41, 123, 46, 53, 63, 123]) + _root.onboarding.bye(firstName: firstName),
			);
		map['end.stringPages.0'] = _root.$meta.d([106, 117, 123, 8, 62, 50, 47, 62]);
		map['end.stringPages.1'] = _root.$meta.d([105, 117, 123, 8, 62, 50, 47, 62]);
		map['end.pages.0.unknown'] = _root.$meta.d([14, 53, 57, 62, 48, 58, 53, 53, 47, 62, 41, 81, 29, 62, 51, 55, 62, 41]);
		map['end.pages.1.with space'] = _root.$meta.d([30, 50, 53, 123, 29, 62, 51, 55, 62, 41]);
		map['end.pages.1.with second space'] = _root.$meta.d([30, 50, 53, 123, 105, 117, 123, 29, 62, 51, 55, 62, 41]);
		map['advancedPlural'] = ({required num count, required InlineSpan Function(num) countBuilder, required GenderContext gender}) => RichPluralResolvers.bridge(
				n: count,
				resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('de'),
				one: () => TextSpan(children: [
					TextSpan(text: _root.$meta.d([30, 50, 53, 40])),
				]),
				other: () => TextSpan(children: [
					TextSpan(text: _root.$meta.d([26, 53, 63, 62, 41, 62, 123])),
					countBuilder(count),
					TextSpan(text: _root.$meta.d([119, 123]) + _root.onboarding.greet2(gender: gender)),
				]),
			);

		_map = map;
		return map;
	}
}

